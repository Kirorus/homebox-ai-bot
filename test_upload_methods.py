#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
"""
import asyncio
import sys
import os
from PIL import Image
import tempfile

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append('.')

from homebox_api import HomeboxAPI
import config

async def test_all_methods():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
        img = Image.new('RGB', (50, 50), color='red')
        img.save(temp_file.name, 'JPEG')
        temp_path = temp_file.name
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API
        print("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...")
        api = HomeboxAPI()
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏
        print("üìç –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π...")
        locations = await api.get_locations()
        if not locations:
            print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏')
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞—Ü–∏–π: {len(locations)}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print("üì¶ –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        item_result = await api.create_item(
            name='Upload Test Item',
            description='Testing upload methods',
            location_id=str(locations[0]['id'])
        )
        
        if 'error' in item_result:
            print(f'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç: {item_result["error"]}')
            print("üîç –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            try:
                session = await api._get_session()
                async with session.get(
                    f'{api.base_url}/api/v1/items',
                    headers=api.headers
                ) as response:
                    if response.status == 200:
                        items = await response.json()
                        print(f'üîç –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(items) if items else 0}')
                        print(f'üîç –ü–µ—Ä–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç: {items[0] if items else "None"}')
                        if items and len(items) > 0:
                            # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º ID
                            valid_item = None
                            for item in items:
                                if isinstance(item, dict) and item.get('id') and str(item['id']) != '0':
                                    valid_item = item
                                    break
                                elif isinstance(item, str) and item and item != '0':
                                    valid_item = {'id': item}
                                    break
                            
                            if valid_item:
                                item_id = str(valid_item['id'])
                                print(f'‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç: {item_id}')
                            else:
                                print('‚ùå –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
                                return
                        else:
                            print('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
                            return
                    else:
                        print(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: HTTP {response.status}')
                        return
            except Exception as e:
                print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}')
                return
        else:
            item_id = item_result.get('id')
            print(f'‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç: {item_id}')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        methods = [
            ('Raw HTTP Upload', api.upload_photo)
        ]
        
        working_methods = []
        
        for name, method in methods:
            print(f'\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {name}')
            try:
                success = await method(item_id, temp_path)
                if success:
                    print(f'‚úÖ {name}: –†–ê–ë–û–¢–ê–ï–¢!')
                    working_methods.append((name, method))
                else:
                    print(f'‚ùå {name}: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - {api.last_error}')
            except Exception as e:
                print(f'‚ùå {name}: –û—à–∏–±–∫–∞ - {e}')
        
        print(f'\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:')
        print(f'–†–∞–±–æ—á–∏—Ö –º–µ—Ç–æ–¥–æ–≤: {len(working_methods)}')
        for name, _ in working_methods:
            print(f'  ‚úÖ {name}')
        
        if working_methods:
            best_method = working_methods[0]
            print(f'\nüèÜ –õ—É—á—à–∏–π –º–µ—Ç–æ–¥: {best_method[0]}')
            return best_method[0]
        else:
            print('\n‚ùå –ù–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
            return None
    
    except Exception as e:
        print(f'‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}')
        return None
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(temp_path):
            os.remove(temp_path)

if __name__ == "__main__":
    result = asyncio.run(test_all_methods())
    if result:
        print(f"\nüéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {result}")
    else:
        print("\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
